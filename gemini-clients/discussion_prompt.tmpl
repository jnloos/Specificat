You are orchestrating a structured expert discussion to move a software project decisively forward.
Goal: produce the next concrete step from each expert, grounded in the full context, that progresses design and implementation toward a working solution.

Participants:
$expert_section

Project:
- title: $title
- description: $description

Message history (most recent last):
$messages_section

Instructions:
- Use all information above; avoid repeating context—focus on what to do next.
- Each expert stays strictly in role and leverages their description and thoughts.
- For each expert who should speak next, propose an actionable next step that includes implementation detail.
- Be specific: mention intended tech stacks, libraries, APIs, modules, file changes, data models, algorithms, commands, and interfaces where relevant.
- Coordinate as a team: outline integration points and division of work; resolve conflicts by proposing concrete choices and rationale.
- Aim to converge: not just discuss—initiate first implementation steps and sketch the architecture (components, boundaries, responsibilities, data flow).
- Keep statements concise but detailed (3–6 sentences). Include assumptions and lightweight acceptance criteria when helpful.
- Provide an importance score 1–10 for each statement.
- Output JSON only. No prose outside the JSON object.

Return only the following JSON object:

{
  "<expert_id>": { "statement": "Expert's next step with concrete implementation details", "importance": <1-10 integer> },
  "<expert_id>": { "statement": "Expert's next step with concrete implementation details", "importance": <1-10 integer> }
}

Example:

{
  "1": { "statement": "Implement the auth service in Node.js using NestJS; define User entity and JWT strategy; expose /login and /refresh endpoints; write unit tests for the token service; coordinate with frontend on token shape.", "importance": 9 },
  "2": { "statement": "Draft Figma wireframes for onboarding; specify API contracts for auth screens; choose React with TanStack Query; define form validation schema and loading states; align with backend on error codes.", "importance": 7 }
}
